// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parser parse("***Bold and italicized text***") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "nodes": [
            {
              "text": "Bold and italicized text",
              "type": "text",
            },
          ],
          "type": "bold-italics",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("**Bold text**") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "nodes": [
            {
              "text": "Bold text",
              "type": "text",
            },
          ],
          "type": "bold",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("*Italicized and _underlined_*") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "nodes": [
            {
              "text": "Italicized and ",
              "type": "text",
            },
            {
              "nodes": [
                {
                  "text": "underlined",
                  "type": "text",
                },
              ],
              "type": "underline",
            },
          ],
          "type": "italics",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("*Italicized text*") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "nodes": [
            {
              "text": "Italicized text",
              "type": "text",
            },
          ],
          "type": "italics",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("_Underlined text_") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "nodes": [
            {
              "text": "Underlined text",
              "type": "text",
            },
          ],
          "type": "underline",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("Foo

Bar") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "text": "Foo",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
    {
      "nodes": [
        {
          "text": "Bar",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("Hello, World!") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "text": "Hello, World!",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("Invalid * italicized * text with spaces") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "text": "Invalid * italicized * text with spaces",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("Invalid ** bold ** text with spaces") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "text": "Invalid ** bold ** text with spaces",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("Invalid **bold

text** with newlines") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "text": "Invalid **bold",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
    {
      "nodes": [
        {
          "text": "text** with newlines",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("Invalid *italicized

text* with newlines") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "text": "Invalid *italicized",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
    {
      "nodes": [
        {
          "text": "text* with newlines",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("Invalid _ underlined _ text with spaces") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "text": "Invalid _ underlined _ text with spaces",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("Invalid _underlined

text_ with newlines") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "text": "Invalid _underlined",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
    {
      "nodes": [
        {
          "text": "text_ with newlines",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("Nested **bold** text") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "text": "Nested ",
          "type": "text",
        },
        {
          "nodes": [
            {
              "text": "bold",
              "type": "text",
            },
          ],
          "type": "bold",
        },
        {
          "text": " text",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("Nested *italicized* text") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "text": "Nested ",
          "type": "text",
        },
        {
          "nodes": [
            {
              "text": "italicized",
              "type": "text",
            },
          ],
          "type": "italics",
        },
        {
          "text": " text",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("Nested _underlined_ text") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "text": "Nested ",
          "type": "text",
        },
        {
          "nodes": [
            {
              "text": "underlined",
              "type": "text",
            },
          ],
          "type": "underline",
        },
        {
          "text": " text",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("Valid **bold
text** with a newline") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "text": "Valid ",
          "type": "text",
        },
        {
          "nodes": [
            {
              "text": "bold
text",
              "type": "text",
            },
          ],
          "type": "bold",
        },
        {
          "text": " with a newline",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("Valid *italicized
text* with a newline") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "text": "Valid ",
          "type": "text",
        },
        {
          "nodes": [
            {
              "text": "italicized
text",
              "type": "text",
            },
          ],
          "type": "italics",
        },
        {
          "text": " with a newline",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("Valid _underlined
text_ with a newline") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "text": "Valid ",
          "type": "text",
        },
        {
          "nodes": [
            {
              "text": "underlined
text",
              "type": "text",
            },
          ],
          "type": "underline",
        },
        {
          "text": " with a newline",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;

exports[`parser parse("one
paragraph
spanning lines") .tree matches the snapshot 1`] = `
{
  "nodes": [
    {
      "nodes": [
        {
          "text": "one
paragraph
spanning lines",
          "type": "text",
        },
      ],
      "type": "paragraph",
    },
  ],
  "type": "root",
}
`;
